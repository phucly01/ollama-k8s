#!/bin/bash

if [ "$#" != "1" ]; then
  echo "Synstax: $0 [master|worker]"
  echo "Example: $0 master"
  exit 1
fi

echo 1. Turn off swap
sudo swapoff -a && sudo sed -i '/.*swap.*/d' /etc/fstab

echo 2. Install required prerequisite packages
sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release ssh

echo 3. Install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && sudo apt install docker-ce docker-ce-cli containerd.io -y

echo 4. Configure docker to use systemd		
sudo tee /etc/docker/daemon.json<<EOF
		{
		"exec-opts": ["native.cgroupdriver=systemd"],
		"log-driver": "json-file",
		"log-opts": {
		"max-size": "100m"
		},
		"storage-driver": "overlay2"
		}
		EOF

echo 5. Install kubeadm, kubelet and kubectl
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg && echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list && sudo apt-get update && sudo apt install -y kubelet kubeadm kubectl && sudo apt-mark hold kubelet kubeadm kubectl

echo 6. Configure containerd
sudo mv /etc/containerd/config.toml /etc/containerd/config.toml.orig && sudo containerd config default | sudo tee /etc/containerd/config.toml && sudo sed -i 's/\( *\)\(SystemdCgroup\) = false/\1\2 = true/g' /etc/containerd/config.toml && sudo systemctl daemon-reload && sudo systemctl restart containerd && echo br_netfilter | sudo tee /etc/modules-load.d/containerd.conf && sudo modprobe br_netfilter

if [ "$1" == "master" ]; then
  echo 7. Setting up master node
  if [ "`sudo ufw status`" == *" active" ]; then
    echo 7a. Adding ports to ufw
    sudo ufw allow 6443/tcp  && sudo ufw allow 2379:2380/tcp && sudo ufw allow 10250/tcp && sudo ufw allow 10251/tcp && sudo ufw allow 10252/tcp && sudo ufw reload
  fi

  echo 7b. Initialize kubernetes via pod network 10.0.0.0/16
  sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
		net.bridge.bridge-nf-call-ip6tables = 1
		net.bridge.bridge-nf-call-iptables = 1
		net.ipv4.ip_forward = 1
		EOF
  sudo kubeadm init --apiserver-advertise-address=<main interface IP> --pod-network-cidr 10.0.0.0/16 --v=5

  echo 7c. Allow normal user to use without sudo
  mkdir -p $HOME/.kube && sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config && sudo chown $(id -u):$(id -g) $HOME/.kube/config && export KUBECONFIG=~/.kube/config && echo "export KUBECONFIG=~/.kube/config" >>  ~/.bashrc && sudo  systemctl restart kubelet

  echo 7d. Adding network addon
  kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/calico.yaml
fi

if [ "$1" == "worker" ]; then
  echo 7. Setting up worker node
  if [ "`sudo ufw status`" == *" active" ]; then
    echo 7a. Adding ports to ufw
    sudo ufw allow 10250/tcp && sudo ufw allow 30000:32767/tcp && sudo ufw reload
  fi

  echo 7b. Getting join command from master node
  read -p "Enter master node IP: " masterip
  read -p "Enter master node ssh username: " username
  join=`ssh ${username}@${masterip} "kubeadm token create --print-join-command"`
  eval "sudo $join --v=5"
fi


